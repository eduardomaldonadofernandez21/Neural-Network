# -*- coding: utf-8 -*-
"""RedesNeuronales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vXojumwQKB81cNKpZoFGnfiOqTV2wmXl
"""

# Commented out IPython magic to ensure Python compatibility.
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.optimizers import RMSprop
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K
from keras.callbacks import EarlyStopping
import keras
from time import time
import matplotlib.pyplot as mpl
from google.colab import drive
drive.mount('/content/drive')
# DATA SOURCE --------------------------------------------------

batch_size = 15

train_data_dir = '/content/drive/My Drive/Colab Notebooks/datasets/training'
validation_data_dir = '/content/drive/My Drive/Colab Notebooks/datasets/validation'

train_datagen = ImageDataGenerator(
        rescale=1./255,
        rotation_range=15,
        zoom_range=0.1,
        horizontal_flip=True
)

validation_datagen = ImageDataGenerator(
        rescale=1./255
)

train_generator = train_datagen.flow_from_directory(
        train_data_dir,
        target_size=(150, 150),
        batch_size=batch_size,
        class_mode='categorical')

validation_generator = validation_datagen.flow_from_directory(
        validation_data_dir,
        target_size=(150, 150),
        batch_size=batch_size,
        class_mode='categorical')


# MODEL --------------------------------------------------

model = Sequential()
model.add(Conv2D(32, kernel_size=(5, 5),
                 activation='relu',
                 input_shape=(150, 150, 3)))
model.add(MaxPooling2D(pool_size=(4, 4)))
model.add(Conv2D(64, (5, 5), activation='relu'))
model.add(MaxPooling2D(pool_size=(4, 4)))
model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(128, activation='relu'))

model.add(Dropout(0.4))
model.add(Dense(5, activation='softmax'))

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adadelta(),
              metrics=['accuracy'])


# TRAINING --------------------------------------------------

epochs = 100

es = EarlyStopping(monitor='val_accuracy', mode='max', verbose=1, patience=20, restore_best_weights=True)
 
history = model.fit_generator(
        train_generator,
        epochs=epochs,
        validation_data = validation_generator,
        callbacks = [es]
)


# SAVING --------------------------------------------------
model.save("mimodelo.h5")

# VALIDATION ----------------------------------------

score = model.evaluate(validation_generator,verbose = 0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

# Graphic for Accuracy
mpl.plot(history.history['accuracy'])
mpl.plot(history.history['val_accuracy'])
mpl.title('Comparanción del Training Accuracy y Validation Accuracy')
mpl.ylabel('accuracy')
mpl.xlabel('epoch')
mpl.legend(['training', 'validation'], loc='upper left')
mpl.show()

# Graphic for loss
mpl.plot(history.history['loss'])
mpl.plot(history.history['val_loss'])
mpl.title('Comparación de Loss')
mpl.ylabel('loss')
mpl.xlabel('epoch')
mpl.legend(['training', 'validation'], loc='upper left')
mpl.show()

# PRODUCTION ----------------------------------------------

from matplotlib.pyplot import imshow
import numpy as np
from PIL import Image
#import keras

model = keras.models.load_model("mimodelo.h5")

# PRUEBAS ----------------------------------------

# %matplotlib inline
pil_im2 = Image.open('/content/drive/My Drive/Colab Notebooks/datasets/validation/balls/ball4.jpg', 'r')
im2 = np.asarray(pil_im2.resize((150, 150)))
imshow(im2)
print(im2.shape) # La imagen es un array de dimensión: 150x150x3

im2 = im2.reshape(1,150,150,3)
model.predict(im2)

from google.colab import drive
drive.mount('/content/drive')